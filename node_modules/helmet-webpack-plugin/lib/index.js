'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat = require('babel-runtime/core-js/array/concat');

var _concat2 = _interopRequireDefault(_concat);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.renderHtmlLayout = renderHtmlLayout;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _reactHelmet = require('react-helmet');

var _reactHelmet2 = _interopRequireDefault(_reactHelmet);

var _chunksorter = require('html-webpack-plugin/lib/chunksorter.js');

var _chunksorter2 = _interopRequireDefault(_chunksorter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HelmetWebpackPlugin = function () {

  /**
   * @param options
   */
  function HelmetWebpackPlugin(options) {
    (0, _classCallCheck3.default)(this, HelmetWebpackPlugin);
    this.options = {
      chunks: 'all',
      excludeChunks: [],
      chunksSortMode: 'auto',
      filename: 'index.html',
      helmetProps: {
        htmlAttributes: {},
        title: 'Title',
        defaultTitle: 'Default Title',
        titleTemplate: '%s - Webpack App',
        meta: [],
        link: [],
        script: [],
        style: []
      },
      rootProps: { id: 'root' }
    };

    this.options = (0, _extends3.default)({}, this.options, options);
  }

  /**
   * @param compiler
   */


  (0, _createClass3.default)(HelmetWebpackPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      compiler.plugin('emit', function (compilation, callback) {
        var stats = compilation.getStats().toJson();
        var chunks = _this.sortChunks(_this.filterChunks(stats));
        var scripts = _this.getScripts(chunks).map(function (asset, i) {
          return _react2.default.createElement('script', { key: i, type: 'text/javascript', src: '/' + asset });
        });
        var styles = _this.getStyles(chunks).map(function (asset) {
          return {
            rel: 'stylesheet',
            href: '/' + asset
          };
        });
        var helmetProps = (0, _extends3.default)({}, _this.options.helmetProps, {
          link: [].concat((0, _toConsumableArray3.default)(_this.options.helmetProps.link), (0, _toConsumableArray3.default)(styles))
        });

        (0, _server.renderToStaticMarkup)(_react2.default.createElement(_reactHelmet2.default, helmetProps));

        var head = _reactHelmet2.default.rewind();
        var body = _react2.default.createElement('div', (0, _extends3.default)({ key: 'body' }, _this.options.rootProps));
        var html = renderHtmlLayout(head, [body, scripts]);

        _this.addToAssets(html, compilation);

        callback();
      });
    }

    /**
     * Return an array of filenames matching the given extension
     *
     * @param ext
     * @param chunks
     */

  }, {
    key: 'extractAssetsByExtension',
    value: function extractAssetsByExtension(extension, chunks) {
      var assets = [];

      chunks.forEach(function (chunk) {
        var files = Array.isArray(chunk.files) ? chunk.files : [chunk.files];
        assets = (0, _concat2.default)(assets, files.filter(function (file) {
          return new RegExp('.(' + extension + ')$').test(file);
        }));
      });

      return assets;
    }

    /**
     * Shortcut - get 'js' files from the given chunks
     *
     * @param chunks
     */

  }, {
    key: 'getScripts',
    value: function getScripts(chunks) {
      return this.extractAssetsByExtension('js', chunks);
    }

    /**
     * Shortcut - get 'css' files from the given chunks
     *
     * @param chunks
     */

  }, {
    key: 'getStyles',
    value: function getStyles(chunks) {
      return this.extractAssetsByExtension('css', chunks);
    }

    /**
     * Add output to compilation assets
     *
     * @param content
     * @param assets
     * @returns {*}
     */

  }, {
    key: 'addToAssets',
    value: function addToAssets(content, assets) {
      assets.assets[this.options.filename] = {
        size: function size() {
          return content.length;
        },
        source: function source() {
          return content;
        }
      };
    }

    /**
     * Helper to sort chunks
     * credits: https://github.com/ampedandwired/html-webpack-plugin/blob/master/index.js
     *
     * @param chunks
     * @returns {*}
     */

  }, {
    key: 'sortChunks',
    value: function sortChunks(chunks) {
      // Custom function
      if (typeof this.options.chunksSortMode === 'function') {
        return chunks.sort(this.options.chunksSortMode);
      }
      // Disabled sorting:
      if (this.options.chunksSortMode === 'none') {
        return _chunksorter2.default.none(chunks);
      }
      // Check if the given sort mode is a valid chunkSorter sort mode
      if (typeof _chunksorter2.default[this.options.chunksSortMode] !== 'undefined') {
        return _chunksorter2.default[this.options.chunksSortMode](chunks);
      }
      throw new Error('"' + this.options.chunksSortMode + '" is not a valid chunk sort mode');
    }

    /**
     * Return all chunks from the compilation result which match the exclude and include filters
     * credits: https://github.com/ampedandwired/html-webpack-plugin/blob/master/index.js
     *
     * @param webpackStatsJson
     * @returns {*}
     */

  }, {
    key: 'filterChunks',
    value: function filterChunks(webpackStatsJson) {
      var _this2 = this;

      return webpackStatsJson.chunks.filter(function (chunk) {
        var chunkName = chunk.names[0];
        // This chunk doesn't have a name. This script can't handled it.
        if (chunkName === undefined) {
          return false;
        }
        // Skip if the chunk should be lazy loaded
        if (!chunk.initial) {
          return false;
        }
        // Skip if the chunks should be filtered and the given chunk was not added explicity
        if (Array.isArray(_this2.options.chunks) && _this2.options.chunks.indexOf(chunkName) === -1) {
          return false;
        }
        // Skip if the chunks should be filtered and the given chunk was excluded explicity
        if (Array.isArray(_this2.options.excludeChunks) && _this2.options.excludeChunks.indexOf(chunkName) !== -1) {
          return false;
        }
        // Add otherwise
        return true;
      });
    }
  }]);
  return HelmetWebpackPlugin;
}();

exports.default = HelmetWebpackPlugin;

/**
 * Render the HTML layout
 *
 * @param head
 * @param body
 * @param scripts
 * @returns {string}
 */

function renderHtmlLayout(head, body) {
  return '<!DOCTYPE html>' + (0, _server.renderToStaticMarkup)(_react2.default.createElement(
    'html',
    head.htmlAttributes.toComponent(),
    _react2.default.createElement(
      'head',
      null,
      head.title.toComponent(),
      head.meta.toComponent(),
      head.base.toComponent(),
      head.link.toComponent(),
      head.script.toComponent(),
      head.style.toComponent()
    ),
    _react2.default.createElement(
      'body',
      null,
      body
    )
  ));
}